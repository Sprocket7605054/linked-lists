class Node: 
    def __init__(self, data):
        self.data = data
        self.next = None

class Linked:
    def __init__(self):
        self.head = None 

    def insertAtBegin(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            return
        else:
            new_node.next = self.head
            self.head = new_node

    def insertAtIndex(self, data, index):
            new_node = Node(data)
            current_node = self.head
            position = 0
            if position == index:
                self.insertAtBegin(data)
            else:
                while(current_node != None and position+1 != index):
                    position = position+1
                    current_node = current_node.next
    
                if current_node != None:
    
                    new_node.next = current_node.next
                    current_node.next = new_node
                else:
                    print("Index not present")

    def inserAtEnd(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            return
    
        current_node = self.head
        while(current_node.next):
            current_node = current_node.next
    
        current_node.next = new_node

    def updateNode(self, val, index):
        current_node = self.head
        position = 0
        if position == index:
            current_node.data = val
        else:
            while(current_node != None and position != index):
                position = position+1
                current_node = current_node.next
    
            if current_node != None:
                current_node.data = val
            else:
                print("Index not present")

    def remove_first_node(self):
        if(self.head == None):
            return
        
        self.head = self.head.next
    
    def print_heights(self):
        current = self.head
        c = 1
        while current:
            Lheights = current.data
            print(f"The height of student {c} is", Lheights)
            current = current.next
            c = c + 1



def main():
    x = True
    height_list = []
    llist = Linked()
    #getting all the inputs while loop
    while x:
        height = input("Please insert a height (Ex: 5'5 or 5'3): ")
        if (height.lower() == "done"):
            x = False
        else: 
            height_list.append(height)
            height_list.sort()
            for y in range(len(height_list)):
                print(height_list[y])
    #add the heights at the beginning so it "sorts"
    for y in range(len(height_list)):
            llist.insertAtBegin(height_list[y])
    llist.print_heights()
    m = (len(height_list))//2
    print("The middle of the heights is:", height_list[m])
main()
